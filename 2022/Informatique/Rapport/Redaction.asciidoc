= TP5 : Les Interruption
Par Martelet Curtis
:sectnums:
:partnums:
:hardbreaks:
:toc:

<<<

== Introduction aux interruptions.

=== Interruptions Externes.

Avant tout, ces TP ont été réalisé sur une carte microcontrôleur _STM 32L152C-Discovery_.

Une interruption est une fonction électronique du microcontrôleur.
A la différence d'une fonction que l'on programme, une interruption est conçu pour que l'on ait pas à attendre.

Pour débuter, nous souhaitons piloter les LEDs *PB6* et *PB7* de la carte à l'aide du bouton *PB0*. 
On utilisera une interruption pour réaliser cette fonction.

On doit réaliser le changement d'état des LEDs sur le front montant et descendant de *PB0*.

A l'aide du registre du microcontrôleur (stm32l1xx.h), on trouve que c'est `EXTI_Trigger` qui défini l'activation de l'interruption en fonction du front que l'on veut : 
Front Descendant : _EXTI_Trigger_Falling_.
Front Montant : _EXTI_Trigger_Rising_.
Front Montant/Descendant : _EXTI_Trigger_Rising_Falling_.

On utilise la fonction `IRQ_EXTI0_Config` pour configurer l'interruption :
[source,c]
----
void IRQ_EXTI0_Config()
{
    // Configure GPIO pour l'Interrupteur
    /* Activer GPIOA */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);

    GPIO_InitTypeDef gpio_a;
    GPIO_StructInit(&gpio_a);
    gpio_a.GPIO_Mode = GPIO_Mode_IN;
    gpio_a.GPIO_Pin = GPIO_Pin_0; // Pin 0
    GPIO_Init(GPIOA,&gpio_a);

    /* Activer SYSCFG sur APB2
     * pour permettre l'utilisation des interruptions externes */
    RCC_APB2PeriphClockCmd (RCC_APB2Periph_SYSCFG,ENABLE);
    /* Declarer PA0 comme source d'interruption */
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource0);
    /* Param. des signaux qui déclencheront l'appel de EXTI0_IRQHandler()
     * autrement dit on paramètre les signaux associes a la "ligne 0"
     * ici : sur front montant & descendant ("EXTI_Trigger_Rising_Falling")     */
    EXTI_InitTypeDef EXTI0_params;
    EXTI_StructInit(&EXTI0_params);
    EXTI0_params.EXTI_Line = EXTI_Line0;
    EXTI0_params.EXTI_LineCmd = ENABLE;
    EXTI0_params.EXTI_Trigger = EXTI_Trigger_Rising_Falling;

    EXTI_Init(&EXTI0_params);

    /* Activer l'interruption dans le NVIC */
    NVIC_InitTypeDef nvic;
    NVIC_Init(&nvic);
    nvic.NVIC_IRQChannel = EXTI0_IRQn;
    nvic.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&nvic);
}
----

Une fois l'interruption configurée, il s'agit maintenant de définir ce qu'elle réalisera.
La fonction `EXTI0_IRQHandler` est faite pour cela : elle s'execute quand l'interruption a lieu.

On souhaite donc inverser l'état d'une DEL que l'on aura choisie. `GPIO_ToggleBits` est la fonction du GPIO qui permet d'inverser l'état d'un pin. Il est configuré en fonction du coté (A ou B) et du numéro de la pin.
[source,c]
----
// callback pour l'interruption externe EXTI0_IRQ
void EXTI0_IRQHandler(void) // Le code a executer quand il y a interruption.
{
    if(EXTI_GetITStatus(EXTI_Line0) != RESET) //Permet de faire une seule fois l'interruption au lieu de la répéter.
    {
        /* Clear the EXTI line 0 pending bit (enlève le flag) */
        EXTI_ClearITPendingBit(EXTI_Line0);
        GPIO_ToggleBits(GPIOB,GPIO_Pin_7); // Inverse état du pin 7 du coté B.
        GPIO_ToggleBits(GPIOB,GPIO_Pin_6); // Inverse état du pin 6 du coté B.
    }
}
----
Ici, le if évite que l'interruption se réalise plusieurs fois d'affilé, par exemple dans le cas du rebond d'un bouton.

Avec cette interruption, on inversera les états des LEDs PB6 et PB7 sur la pression et la relève du bouton.

Pour que les états des LEDs soient inversés l'un par rapport à l'autre, il suffit de définir l'état de base d'une des LEDs comme étant allumé :
On ajoute, avant la boucle du main, la fonction `GPIO_SetBits` qui se paramètre comme `GPIO_ToggleBits`. Cette fonction "set" à 1 le pin configuré, ce qui revient à alimenter la DEL.

La fonction main de cet exercice devrait donc ressembler à cela :
[source,c]
.Fonction Main
------
int main(void)
{
    // # LED sur PB7 et PB6
    /* Activer GPIOB sur AHB */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE);
    GPIO_InitTypeDef gpio_b;
    GPIO_StructInit(&gpio_b);
    gpio_b.GPIO_Mode = GPIO_Mode_OUT; // Sortie tout-ou-rien
    gpio_b.GPIO_Pin = GPIO_Pin_7|GPIO_Pin_6; // Pin choisi : 7 et 6
    GPIO_Init(GPIOB,&gpio_b);
    /* allumer la LED*/
    GPIO_SetBits(GPIOB,GPIO_Pin_7); // Set à 1 le pin 7 du coté B. La DEL est allumée.
    // configuration de l'interruption
    IRQ_EXTI0_Config();

    while(1) {
        // Rien car on attend l'interruption
    }
}
------

=== Interruptions Périodique

Si le premier exercice ordonnait une interruption sur l'appuie d'un bouton (donc une commande extérieure), ce second exercice se basera sur l'horloge du microcontrôleur pour ordonner l'interruption.

On souhaite faire clignoter la DEL toutes les 500ms.
On va utiliser le *Timer 2* de la carte pour mesurer ce temps.

[source,c]
.TIM2_IRQ_Config
------
void TIM2_IRQ_Config()
{
    /*Activer TIM2 sur APB1 */  
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
    TIM_TimeBaseInitTypeDef timer_2;
    TIM_TimeBaseStructInit(&timer_2);
    timer_2.TIM_Prescaler = 16000-1;
    timer_2.TIM_Period = 500-1;
    TIM_TimeBaseInit(TIM2,&timer_2);
    TIM_SetCounter(TIM2,0);
    TIM_Cmd(TIM2, ENABLE); // Active le Timer

    /* Associer une interruption a TIM2 */
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

    NVIC_InitTypeDef nvic;
    /* Configuration de l'interruption */
    nvic.NVIC_IRQChannel = TIM2_IRQn;
    nvic.NVIC_IRQChannelPreemptionPriority = 0; 
    nvic.NVIC_IRQChannelSubPriority = 1;
    nvic.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&nvic);
}
------

La fréquence du microcontrôleur étant de 16Mhz, on choisi un prescaler de 16000 : `TIM_Period` s'incrémentera toutes les ms.
Voulant une interruptions toutes les 500ms, il suffira de définir la valeur de `TIM_Period` à 500.

Le code de l'interruption est identique à celle des interruptions extérieures, au détail près qu'elle s'appelle `TIM2_IRQHandler`.

[source,c]
.TIM2_IRQHandler
------
void TIM2_IRQHandler() {
    if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
    {
        TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
        GPIO_ToggleBits(GPIOB, GPIO_Pin_7); // Inversion du pin 7
    }
}
------

==== Changement de Fréquence

On nous demande cette fois-ci une fréquence de 44kHz.
On décide cette fois-ci de mettre le prescaler à 0 (`TIM_Prescaler` = 0).
Fréquence voulue = 44 kHz ; Fréquence du CPU = 16 MHz.

Thorloge = (TIM_Period+1)*(TIM_Prescaler+1)/16e6
1/44e3 = TIM_Period/16e6 <=> TIM_Period = 16e6/44e3 = *363.6* (on arrondira au supérieur)

Une fois reconfiguré, on observe sur l'oscilloscope que la fréquence observée n'est pas 44kHz, mais 22kHz : ramené en période, 44kHz = 22.7us et 22kHz = 45.5us.
Une période de la DEL est quand elle a été allumée et éteinte une fois.
Hors, le code actuel fait que tous les 22.7us (44kHz), on inverse l'état de la DEL.
Ainsi, 22.7us + 22.7us = 45.5us, soit 22kHz.

Pour remédier à ce problème, on peut par exemple réduire de moitié la valeur de `timer_2.TIM_Period`, soit 182 au lieu de 364.

<<<

== Générer un courant sinusoïdal

Maintenant que l'on sait comment réaliser des interruptions périodiquement, on veut générer une tension sinusoïdale sur le pin *PA4* de la carte.
Cependant, le microcontrôleur n'est pas capable de lui-même de faire ce signal, c'est pourquoi nous allons l'aider en calculant en amont les valeurs qu'il générera.

=== Le sinus

Avant toute chose, nous avons besoin de la bibliothèque *math* (`math.h`) pour utiliser le sinus. 

Nous stockerons les valeurs du sinus dans un tableau nommé _Tension_ que l'on définira à l'aide de la fonction `malloc`.
Malloc permet d'allouer à une variable un espace qui sera calculé en fonction du type de variable présente dedans :
[source,c]
------
Tension = malloc(100*sizeof(float));
------
Tension fait maintenant la taille de 100 valeurs du type float.
Ce tableau devra être déclaré globalement pour que l'interruption puisse s'en servir.

Les préparations maintenant faites, il faut maintenant calculer le sinus.

L'équation du sinus est :
Tension = 511 * sin(2*3.14159*k/100) + 2047;
où k est un incrément qui ira de 0 à 99 (100 valeurs).

[source,c]
.Calcul du sinus
------
#include <math.h>
float* Tension;

int main()
{
    Tension = malloc(100*sizeof(float));
    for(int k=0;k<100;k++) {
        Tension[k] = 511 * sin(2*3.14159*k/100) + 2047;
    }
}
------

Le microcontrôleur ne peut générer des tensions qu'entre 0 et 3V.
On choisi donc de décaler la valeur moyenne du sinus de +1.5V ; les valeurs seront comprises dans l'amplitude valide.

Le convertisseur analogique à numérique de la carte fonctionne sur 12 bits : 2^12 = 4096 valeurs.
Donc pour 3V, le convertisseur est égal à 4095 ; pour 1.5V (la valeur moyenne), 2047 ; et pour 0V, 0.
C'est pour cela que l'on ajoute 2047 à l'équation, pour centrer le sinus sur 1.5V.

* La valeur minimale du sinus est donc :
2047 - 511 = *1536*, ce qui donne une tension en sortie du convertisseur de *1.25V*.

* La valeur minimale du sinus est donc :
2047 + 511 = *2558*, ce qui donne une tension en sortie du convertisseur de *1.87V*.

J'ai utilisé un produit en croix pour convertir les valeurs du convertisseurs en tension.

=== DAC & sinus

Maintenant que le sinus est calculé et stocké dans la variable _Tension_, il est temps de générer le signal en sortie de la carte.
Pour ce faire, on ré-emploie une fonction du code du précédent exercice, *TIM2*.
On devra également utiliser le convertisseur Digital à Analogique (*DAC*).

==== Configuration du TIMER

Nous n'avons pas besoin de toucher à la configuration précédente de *TIM2*. Le prescaler (`_timer_2.TIM_Prescaler`) et la période (`timer_2.TIM_Period`) restent les mêmes puisque l'on garde la fréquence de 44kHz.

La seule partie qui change est l'interruption en elle même :
[source,c]
------
void TIM2_IRQHandler() {
    if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
    {
        TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
        GPIO_ToggleBits(GPIOB, GPIO_Pin_7); // Débugage
        DAC1_Set(Tension[n%100]); // Converti la valeur en tension 
        // On ne dépasse pas 99 valeurs : à n = 100, n%100 = 0
        n++; // Incrémentation
    }
}
------
On déclarer en variable globale _n_, l'incrémenteur de _Tension_.

==== Configuration du DAC

Le *DAC* est un convertisseur Digital à Analogique.
Dans ce TD, il est nécessaire pour convertir les valeurs du sinus en une tension.

[source,c]
.DAC1_Config
------
void DAC1_Config()
{
    /*Activer GPIOA sur AHB */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    /* Configurer PA4 en mode analogique*/
    GPIO_InitTypeDef gpio_a;
    GPIO_StructInit(&gpio_a);
    gpio_a.GPIO_Mode  = GPIO_Mode_AN; // Mode Analogique
    gpio_a.GPIO_Pin = GPIO_Pin_4;     // Sortie sur PIN 4
    GPIO_Init(GPIOA, &gpio_a);

    /*Activer DAC sur APB1 */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
    /* Configurer DAC1 avec paramètres par défaut */
    DAC_InitTypeDef dac_1;
    DAC_StructInit(&dac_1);
    DAC_Init(DAC_Channel_1, &dac_1);
    /* Activer DAC1 */
    DAC_Cmd(DAC_Channel_1, ENABLE);
}
------

Maintenant que le DAC est configuré, il ne reste plus qu'à convertir les valeurs et à les émettre.
Le DAC utilise deux fonctions pour convertir puis générer une tension :
- `DAC_SetChannel1Data` et initialise la tension.
- `DAC_SoftwareTriggerCmd` émet la valeur.

[source,c]
------
void DAC1_Set(uint16_t value)
{
    DAC_SetChannel1Data(DAC_Align_12b_R , value);
    DAC_SoftwareTriggerCmd(DAC_Channel_1 , ENABLE);
}
------

=== Écoute au Casque

Il n'est pas possible de brancher directement un casque à notre microcontrôleur. Le casque fonctionne avec des tensions comprises entre -1.5V et 1.5V, or, la carte n'est pas capable de générer ces valeurs négatifs. 
En réalisant un pont diviseur de tension et en y ajoutant un condensateur, on peut abaisser la tension moyenne de 1.5V à 0V.
Ainsi, on peut brancher le casque au microcontrôleur par l'intermédiaire.

Une fois que l'on branche un casque sur le circuit, le son entendu n'est pas un DO, mais une note plus aiguë. 
Cela s'explique par le casque qui a besoin qu'on l'attaque avec une tension supérieure à celle fournie en sortie du condensateur. 
Ce manque de tension provoque une perturbation du signal généré par la carte, et donc crée des fréquences parasites qui perturbent l'écoute :
Le son entendu est plus aiguë que ce que l'on devrait avoir.

En mettant un montage suiveur entre le condensateur et le casque, l'AOP joue le role d'une alimentation qui va fournir un signal de meilleur qualité au casque, permettant d'entendre le DO.

<<<

== Le Mini-Synthétiseur

A l'aide des fonctions précédemment utilisées, cet exercice demande que l'on émette du son à partir du microcontrôleur. 

Dans un premier temps, on dit pouvoir modifier la fréquence du DAC sur l'appuie du bouton *PA0*. 
Chacune de ces fréquences correspondent à une note de musique : à chaque pression, la note produite changera.

[cols="2b,^,^,^,^,^,^,^,^"]
|===
|Note|Do|Re|Mi|Fa|Sol|La|Si|Do
|Fréquence|262|294|330|350|392|440|494|524
|Valeur DAC|611|544|484|458|408|363|323|306
|===

Ces valeurs sont calculés de la même façon que dans l'exercice sur les interruptions périodiques :
f_note = 1/(v_DAC*100/f_horloge) <=> v_DAC = f_horloge/(f_note*100)
- f_horloge = 16e6Hz.
- f_note, fréquence de la note.
- v_DAC, valeur du dac.

Si on multiplie v_DAC par 100, c'est que le signal est constitué de 100 points.

Ces valeurs sont initialisée dans une variable nommée _note_periode_.
[source,c]
------
unsigned int note_periode[8] = {611,544,484,458,408,363,323,306};
------

On récupère du premier exercice la configuration du GPIO pour faire fonctionner le bouton *PA0*. 

Cette fois-ci, on n'utilisera pas une interruption sur l'appuie du bouton car cela causerait des problèmes lors de l'execution.
On place alors dans le while :
[source,c]
------
int switch_status = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0); // 1 si appuie
if (switch_status == Bit_SET && prev_switch_status == 0) // Empêche la réactivation tant que le bouton est appuyé
{
    interrupteur++; // Nb d'appuie sur l'interrupteur
	TIM_Cmd(TIM2, DISABLE); // Désactive le Compteur
	TIM_SetCounter(TIM2, 0); // Réinitialise le Compteur
	TIM_TimeBaseInitTypeDef timer_2;
	TIM_TimeBaseStructInit(&timer_2);
	timer_2.TIM_Prescaler = 0; 
	timer_2.TIM_Period = note_periode[interrupteur%8]; // Change valeur de la période du timer
    // A 8, on redescend à 0
	TIM_TimeBaseInit(TIM2, &timer_2);
	TIM_Cmd(TIM2, ENABLE);
}
prev_switch_status = switch_status; // Stock l'état n dans une variable n-1.
------

Le reste du code est identique à l'exercice précédent : 
- Utiliser le Timer 2 pour enclencher l'interruption, `TIM2_IRQHandler`.
- Utiliser le DAC (et `DAC_Set`) pour générer le signal
- Stocker les valeurs du signal dans une variable globale (_T_), ainsi que son compteur (_n_).


===== Signal sinus

[source,c]
------
void buildSinus() {
	for (int k = 0; k < 100; k++) {
		T[k] = 511 * sin(2 * 3.14159 * k / 100) + 2047;
	}
}
------

===== Signal en dent de scie

[source,c]
------
void buildSawTooth() {
    for(int k=0; k<100;k++) {
        T[k] = 2047-511 + (k*1022/100);
    }
}
------

===== Signal en triangle

[source,c]
------
void buildTriangle() {
	int k;
    for(int k=0; k<100/2;k++) {
        T[k] = 2047-511 + (k*1022*2/100);
    }
    for(; k<100;k++) {
        T[k] = 2047 + 511 -((k-100/2)*1022*2/100);
    }
}
------

Le signal qui me parait le plus agressif à l'écoute est le second, c'est à dire en dent de scie.
Le signal sinusoïdal et triangle ont une composante "positive" et "négative" alors que la dent de scie a uniquement une composante négative.

<<<

== Mini Projet : Filtrage Numérique d'un Signal

Cette ultime partie du TP transformera le microcontrôleur en l'équivalent d'une carte son.

Les fonctions primordiales de ce programme, `Get_Adc_quickly` et `DAC1_Set_Quickly`, sont écrites en *Bare Metal*. Si ils étaient écrite en langage bibliothèque (avec _stm32l1xx.h_), les deux conversions n'auraient pas été assez rapide.

===== Get_Adc_quickly

Cette fonction est utilisée pour convertir le signal arrivant du PC en des valeurs pour la carte.
[source,C]
----
uint16_t Get_Adc_Quickly() {
    ADC1->CR2 |= (uint32_t)ADC_CR2_SWSTART;
    while((ADC1->SR & ADC_FLAG_EOC) == 0) ;
    return (uint16_t) ADC1->DR;
}
----
`ADC1 = ADC_TypeDef (ADC1_BASE = 0x2400 + (APB2PERIPH_BASE = 0x10000 + (PERIPH_BASE = 0x40000000) ) )`
`ADC1_BASE = 0x40000000 + 0x10000 + 0x2400 = 0x40012400`

`ADC1->CR2 => (*ADC1).CR2` : on écrit donc dans CR2, le registre de contrôle, ADC_CR2_SWSTART qui est égale à 0x40000000

typedef struct
{
  __IO uint32_t SR;     /*!< ADC status register, Address offset: 0x00 */
  __IO uint32_t CR1;    /*!< ADC control register 1, Address offset: 0x04 */
  __IO uint32_t CR2;    /*!< ADC control register 2, Address offset: 0x08 */
  __IO uint32_t SMPR1;  /*!< ADC sample time register 1, Address offset: 0x0C */
  __IO uint32_t SMPR2;  /*!< ADC sample time register 2, Address offset: 0x10 */
  __IO uint32_t SMPR3;  /*!< ADC sample time register 3, Address offset: 0x14 */
  __IO uint32_t JOFR1;  /*!< ADC injected channel data offset register 1, Address offset: 0x18 */
  __IO uint32_t JOFR2;  /*!< ADC injected channel data offset register 2, Address offset: 0x1C */
  __IO uint32_t JOFR3;  /*!< ADC injected channel data offset register 3, Address offset: 0x20 */
  __IO uint32_t JOFR4;  /*!< ADC injected channel data offset register 4, Address offset: 0x24 */
  __IO uint32_t HTR;    /*!< ADC watchdog higher threshold register, Address offset: 0x28 */
  __IO uint32_t LTR;    /*!< ADC watchdog lower threshold register, Address offset: 0x2C */
  __IO uint32_t SQR1;   /*!< ADC regular sequence register 1, Address offset: 0x30 */
  __IO uint32_t SQR2;   /*!< ADC regular sequence register 2, Address offset: 0x34 */
  __IO uint32_t SQR3;   /*!< ADC regular sequence register 3, Address offset: 0x38 */
  __IO uint32_t SQR4;   /*!< ADC regular sequence register 4, Address offset: 0x3C */
  __IO uint32_t SQR5;   /*!< ADC regular sequence register 5, Address offset: 0x40 */
  __IO uint32_t JSQR;   /*!< ADC injected sequence register, Address offset: 0x44 */
  __IO uint32_t JDR1;   /*!< ADC injected data register 1, Address offset: 0x48 */
  __IO uint32_t JDR2;   /*!< ADC injected data register 2, Address offset: 0x4C */
  __IO uint32_t JDR3;   /*!< ADC injected data register 3, Address offset: 0x50 */
  __IO uint32_t JDR4;   /*!< ADC injected data register 4, Address offset: 0x54 */
  __IO uint32_t DR;     /*!< ADC regular data register, Address offset: 0x58 */
  __IO uint32_t SMPR0;  /*!< ADC sample time register 0, Address offset: 0x5C */
} ADC_TypeDef;



ADC_CR2_SWSTART = 0x000000 ; Start Conversion of regular channels
ADC_FLAG_EOC = 0x0002
#define __IO volatile    /*!< Defines 'read / write' permissions*/
#define                  ADC1             ((ADC_TypeDef *) ADC1_BASE)
__IO uint32_t            CR2;       /*!< ADC control register 2,    Address offset: 0x08 */
__IO uint32_t            SR;        /*!< ADC status register,       Address offset: 0x00 */
__IO uint32_t            DR;        /*!< ADC regular data register, Address offset: 0x58 */
#define  ADC_CR2_SWSTART ((uint32_t)0x40000000) /*!< Start Conversion of regular channels */
#define ADC_FLAG_EOC     ((uint16_t)0x0002)

[%header,cols=",^1,2"]
|===
|Nom|Offset de l'adresse|Registre
|CR2|0x08|ADC control register 2
|SR|0x00|ADC status register
|DR|0x58|ADC regular data register
|===

===== DAC1_Set_Quickly

Cette fonction est l'inverse Get_Adc_quickly : elle converti les valeurs traité par la carte en une tension pour le casque.

Faire varier _adc_ revient à faire varier le volume en sortie.
Ainsi, diviser par 10 divisera le son en sortie de 10 ; multiplier par 10 aura l'effet inverse ce qui multipliera par 10 le son. 

[source,C]
----
void DAC1_Set_Quickly(uint16_t value) {
	static __IO uint32_t tmp = (uint32_t)DAC_BASE + (uint32_t)0x00000008 + DAC_Align_12b_R;
	*(__IO uint32_t *) tmp = value;
}
----

#define     __IO    volatile             /*!< Defines 'read / write' permissions              */
#define DAC_BASE              (APB1PERIPH_BASE + 0x7400)
#define DAC_Align_12b_R                    ((uint32_t)0x00000000)


=== Passe Bas

Le filtre passe-bas est un filtre qui ne laisse passer que les fréquences inférieures à sa fréquence de coupure (fc) ; les fréquences au dessus de celle-ci sont coupés.

[source,C]
----
uint16_t PasseBas(uint16_t input,uint16_t freqNorm, uint16_t* prevOutput)
{
    uint16_t output = *prevOutput + freqNorm*(input - *prevOutput)/200;
    *prevOutput = output;
    return output;
}
----
En entrée :
    - input est la dernière valeur récupérée sur l'ADC
    - freq_norm : fréquence de coupure exprimée en pourcentage de la bande passante totale.
Sorties :
    - prevOutput est l'amplitude précédente. Doit pointer sur une variable globale qui vaut 0 initialement, ensuite elle evolue sans besoin d'intervenir dessus
Retour :
    - nouvelle amplitude, apres filtrage.

La fonction Passe Bas supprime un très grand nombres de pic sur l'oscilloscope. À l'oreille, le son parait plus grave (plus la fréquence est élevée, plus le son est aiguë).

[%header,cols=",5,5"]
|===
||Filtre Analogique|Filtre Numérique (microcontrôleur)
|Avantage
|- Le filtre analogique converti bien plus rapidement les signaux.
- Moins cher.
|- Le filtre numérique est bien plus simple à configurer.
- Il propose une large variété de configuration (facteur compris entre 10 et 100 pour le passe-bas).
- Très fiable.
|Inconvénient
|- Manque de fiabilité.
|- Prix.
- Usure plus rapide.
- Configuration rigide
|===
https://www.advsolned.com/traitement-analogique-du-signal-asp-ou-le-traitement-numerique-du-signal-dsp-lequel-choisir/
https://www.petoindominique.fr/pdf/cours8.pdf

Après de plusieurs recherches sur des sites spécialisés, je n'ai pas trouvé de bonne raison de choisir un filtre analogique par rapport à un filtre numérique.
Ces derniers semblent bien meilleur sur presque tous les aspects.

=== Compresseur Audio

Le compresseur audio est un amplificateur dont le gain varie en fonction de la tension à son entrée.

Le but d'un compresseur audio est d'égaliser les sons : les sons les plus forts sont atténués tandis que les plus faibles sont amplifiés.

[quote,traitement-signal.com]
____
Un filtre linéaire est, en traitement du signal, un dispositif qui applique un opérateur linéaire à un signal d'entrée. Les filtres linéaires sont rencontrés le plus fréquemment en électronique, mais il est envisageable d'en trouver en mécanique ou dans d'autres technologies. 
____

Le filtre passe-bas est un composant linéaire car il respecte cette définition. 

La fonction du compresseur audio est de réduire l'amplitude d'un signal audio quand il dépasse un certain seuil. A l'inverse, il amplifie le signal quand celui-ci est inférieur à un autre seuil.


<<<

== Annexe [[id,annexe]]

=== Interruption Bouton

[source,c]
------
#include "stm32l1xx.h"

void IRQ_EXTI0_Config();

int main(void)
{
    // # LED sur PB7
    /* Activer GPIOB sur AHB */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE);
    /* Configurer PB7 comme sortie tout-ou-rien */
    GPIO_InitTypeDef gpio_b;
    GPIO_StructInit(&gpio_b);
    gpio_b.GPIO_Mode = GPIO_Mode_OUT;
    gpio_b.GPIO_Pin = GPIO_Pin_7|GPIO_Pin_6;
    GPIO_Init(GPIOB,&gpio_b);
    /* allumer la LED*/
    GPIO_SetBits(GPIOB,GPIO_Pin_7);
    // configuration de l'interruption
    IRQ_EXTI0_Config();

    while(1) {
    }
}

// callback pour l'interruption externe EXTI0_IRQ
void EXTI0_IRQHandler(void) // Le code a executer quand il y a interruption.
{
    if(EXTI_GetITStatus(EXTI_Line0) != RESET) // Permet de faire une seule fois l'interruption au lieu de la répéter.
    {
        /* Clear the EXTI line 0 pending bit (enlève le flag) */
        EXTI_ClearITPendingBit(EXTI_Line0);
        GPIO_ToggleBits(GPIOB,GPIO_Pin_7); // Inverse état du pin 7
        GPIO_ToggleBits(GPIOB,GPIO_Pin_6); // Inverse état du pin 6
    }
}

// ### EXTI0 sur PA0
// Configuration
void IRQ_EXTI0_Config()
{
    // # Interrupteur
    /* Activer GPIOA sur AHB */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
    /* Configurer PB7 comme entree tout-ou-rien */
    GPIO_InitTypeDef gpio_a;
    GPIO_StructInit(&gpio_a);
    gpio_a.GPIO_Mode = GPIO_Mode_IN;
    gpio_a.GPIO_Pin = GPIO_Pin_0;
    GPIO_Init(GPIOA,&gpio_a);

    /* Activer SYSCFG sur APB2
     * pour permettre l'utilisation des interruptions externes */
    RCC_APB2PeriphClockCmd (RCC_APB2Periph_SYSCFG,ENABLE);
    /* Declarer PA0 comme source d'interruption */
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource0);
    /* Param. des signaux qui declencheront l'appel de EXTI0_IRQHandler()
     * autrement dit on parametre les signaux associes a la "ligne 0"
     * ici : sur front montant ("Trigger_Rising")
     */
    EXTI_InitTypeDef EXTI0_params;
    EXTI_StructInit(&EXTI0_params);
    EXTI0_params.EXTI_Line = EXTI_Line0;
    EXTI0_params.EXTI_LineCmd = ENABLE;
    EXTI0_params.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
// Front Descendant : EXTI_Trigger_Falling
// Front Montant : EXTI_Trigger_Rising
// Front : EXTI_Trigger_Rising_Falling

    EXTI_Init(&EXTI0_params);

    /* Activer l'interruption dans le NVIC */
    NVIC_InitTypeDef nvic;
    NVIC_Init(&nvic);
    nvic.NVIC_IRQChannel = EXTI0_IRQn;
    nvic.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&nvic);
}
------

<<<

=== Interruption Periodique
[source,c]
------
#include "stm32l1xx.h"

#include <math.h>
#define pi 3.141592
#include <stdlib.h>

void TIM2_IRQ_Config();

int main(void)
{
    TIM2_IRQ_Config();

    // # LED sur PB7
    /* Activer GPIOB sur AHB */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE);
    /* Configurer PB7 comme sortie tout-ou-rien */
    GPIO_InitTypeDef gpio_b;
    GPIO_StructInit(&gpio_b);
    gpio_b.GPIO_Mode = GPIO_Mode_OUT;
    gpio_b.GPIO_Pin = GPIO_Pin_7;
    GPIO_Init(GPIOB,&gpio_b);

    while(1) { }
}

// callback pour l'interruption periodique associee a TIM2
void TIM2_IRQHandler() {
    if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
    {
        TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
        GPIO_ToggleBits(GPIOB, GPIO_Pin_7); // Inversion du pin 7
    }
}

// ### TIMER 2 + IRQ a 500 ms
// Configuration Timer 2 a 500 ms
// avec emission d'IRQ : execute periodiquement TIM2_IRQHandler()
void TIM2_IRQ_Config()
{
    /*Activer TIM2 sur APB1 */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
    /* Configurer TIM2 a 500 ms */
    TIM_TimeBaseInitTypeDef timer_2;
    TIM_TimeBaseStructInit(&timer_2);
    timer_2.TIM_Prescaler = 0; // prescaler et Période ont au final le même résultat
    timer_2.TIM_Period = 364-1; // Cependant, on utilise prescaler pour compter le temps et Période pour mesurer le temps.
// Fhorloge = 44 000 Hz ; CPU = 16*10^6
// Thorloge = Modificateur/16x10^6 <=> 1/44000 = TIM_Period/16x10^6 <=> TIM_Period = 16x10^6/44000 = 363.6 (on arrondira au supérieur)

// On retrouve 2kHz, la moitié de la fréquence prévue, à cause du fonctionnement de l'horloge
    TIM_TimeBaseInit(TIM2,&timer_2);
    TIM_SetCounter(TIM2,0);
    TIM_Cmd(TIM2, ENABLE);

    /* Associer une interruption a TIM2 */
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

    NVIC_InitTypeDef nvic;
    /* Configuration de l'interruption */
    nvic.NVIC_IRQChannel = TIM2_IRQn;
    nvic.NVIC_IRQChannelPreemptionPriority = 0;
    nvic.NVIC_IRQChannelSubPriority = 1;
    nvic.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&nvic);
}
------

<<<

=== Générer tension sinusoïdale
[source,c]
------
#include "stm32l1xx.h"

#include <math.h>

void DAC1_Config();
void DAC1_Set(uint16_t value);

void TIM2_IRQ_Config();

float* T;
int n=0;

int main(void)
{
    TIM2_IRQ_Config();
    DAC1_Config();

    // # LED sur PB7
    /* Activer GPIOB sur AHB */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE);
    /* Configurer PB7 comme sortie tout-ou-rien */
    GPIO_InitTypeDef gpio_b;
    GPIO_StructInit(&gpio_b);
    gpio_b.GPIO_Mode = GPIO_Mode_OUT;
    gpio_b.GPIO_Pin = GPIO_Pin_7;
    GPIO_Init(GPIOB,&gpio_b);

    T = malloc(100*sizeof(float));
    for(int k=0;k<100;k++)
    {
        T[k] = 511 * sin(2*3.14159*k/100) + 2047;

    }


    while(1) {

    }
}

// callback pour l'interruption periodique associee a TIM2
void TIM2_IRQHandler() {
    if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
    {
        TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
        GPIO_ToggleBits(GPIOB, GPIO_Pin_7);
        DAC1_Set(T[n%100]);
        n++;
    }
}

// ### TIMER 2 + IRQ a 500 ms
// Configuration Timer 2 a 500 ms
// avec emission d'IRQ : execute periodiquement TIM2_IRQHandler()
void TIM2_IRQ_Config()
{
    /*Activer TIM2 sur APB1 */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
    /* Configurer TIM2 a 500 ms */
    TIM_TimeBaseInitTypeDef timer_2;
    TIM_TimeBaseStructInit(&timer_2);
    timer_2.TIM_Prescaler = 0;
    timer_2.TIM_Period = 363;
    TIM_TimeBaseInit(TIM2,&timer_2);
    TIM_SetCounter(TIM2,0);
    TIM_Cmd(TIM2, ENABLE);

    /* Associer une interruption a TIM2 */
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

    NVIC_InitTypeDef nvic;
    /* Configuration de l'interruption */
    nvic.NVIC_IRQChannel = TIM2_IRQn;
    nvic.NVIC_IRQChannelPreemptionPriority = 0;
    nvic.NVIC_IRQChannelSubPriority = 1;
    nvic.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&nvic);
}


// ### DAC1 (DAC Channel 1) sur PA4
// Configuration
void DAC1_Config()
{
    /*Activer GPIOA sur AHB */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    /* Configurer PA4 en mode analogique*/
    GPIO_InitTypeDef gpio_a;
    GPIO_StructInit(&gpio_a);
    gpio_a.GPIO_Mode  = GPIO_Mode_AN;
    gpio_a.GPIO_Pin = GPIO_Pin_4;
    GPIO_Init(GPIOA, &gpio_a);

    /*Activer DAC sur APB1 */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
    /* Configurer DAC1 avec parametres par defaut */
    DAC_InitTypeDef dac_1;
    DAC_StructInit(&dac_1);
    DAC_Init(DAC_Channel_1, &dac_1);
    /* Activer DAC1 */
    DAC_Cmd(DAC_Channel_1, ENABLE);
}

void DAC1_Set(uint16_t value)
{
    DAC_SetChannel1Data( DAC_Align_12b_R, value );
    DAC_SoftwareTriggerCmd( DAC_Channel_1, ENABLE );

}

------

<<<

=== Mini-Synthé
[source,c]
------
#include "stm32l1xx.h"

#include <math.h>
#include <stdlib.h>

void DAC1_Config();
void DAC1_Set(uint16_t value);
void GPIOA_PA0_Config();

void TIM2_IRQ_Config();

unsigned int note_periode[8] = {611,544,484,458,408,363,323,306};


float* T;
int n = 0;
int interrupteur = 0;

void buildSawTooth() {
    for(int k=0; k<100;k++) {
        T[k] = 2047-511 + (k*1022/100);
    }
}
void buildTriangle() {
	int k;
        for(int k=0; k<100/2;k++) {
            T[k] = 2047-511 + (k*1022*2/100);
        }
        for(; k<100;k++) {
            T[k] = 2047 + 511 -((k-100/2)*1022*2/100);
        }
}
void buildSinus() {
	for (int k = 0; k < 100; k++) {
		T[k] = 511 * sin(2 * 3.14159 * k / 100) + 2047;
	}
}

int main(void) {
	TIM2_IRQ_Config();
	DAC1_Config();
	GPIOA_PA0_Config();

	// # LED sur PB7
	/* Activer GPIOB sur AHB */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
	/* Configurer PB7 comme sortie tout-ou-rien */
	GPIO_InitTypeDef gpio_b;
	GPIO_StructInit(&gpio_b);
	gpio_b.GPIO_Mode = GPIO_Mode_OUT;
	gpio_b.GPIO_Pin = GPIO_Pin_7;
	GPIO_Init(GPIOB, &gpio_b);

	T = malloc(100 * sizeof(float));

	//buildSinus();
	//buildSawTooth();
	//buildTriangle();

	GPIOA_PA0_Config();

	int prev_switch_status = 0;

	while (1) {
		int switch_status = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0);
		if (switch_status == Bit_SET && prev_switch_status == 0) {
			// A REMPLIR : ce que l'on doit executer si le bouton est appuye
			interrupteur++; // Nb d'appuie sur l'interrupteur
			TIM_Cmd(TIM2, DISABLE);
			TIM_SetCounter(TIM2, 0);
			TIM_TimeBaseInitTypeDef timer_2;
			TIM_TimeBaseStructInit(&timer_2);
			timer_2.TIM_Prescaler = 0;
			timer_2.TIM_Period = note_periode[interrupteur%8]; // A 8, on redescend à 0
			TIM_TimeBaseInit(TIM2, &timer_2);
			TIM_Cmd(TIM2, ENABLE);
		}
		prev_switch_status = switch_status;
	}
}

// callback pour l'interruption periodique associée a TIM2
void TIM2_IRQHandler() {
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
		GPIO_ToggleBits(GPIOB, GPIO_Pin_7);
		DAC1_Set(T[n % 100]);
		n++;
	}
}

// ### TIMER 2 + IRQ a 500 ms
// Configuration Timer 2 a 500 ms
// avec emission d'IRQ : execute périodiquement TIM2_IRQHandler()
void TIM2_IRQ_Config() {
	/*Activer TIM2 sur APB1 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	/* Configurer TIM2 a 500 ms */
	TIM_TimeBaseInitTypeDef timer_2;
	TIM_TimeBaseStructInit(&timer_2);
	timer_2.TIM_Prescaler = 0;
	timer_2.TIM_Period = 363;
	TIM_TimeBaseInit(TIM2, &timer_2);
	TIM_SetCounter(TIM2, 0);
	TIM_Cmd(TIM2, ENABLE);

	/* Associer une interruption a TIM2 */
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef nvic;
	/* Configuration de l'interruption */
	nvic.NVIC_IRQChannel = TIM2_IRQn;
	nvic.NVIC_IRQChannelPreemptionPriority = 0;
	nvic.NVIC_IRQChannelSubPriority = 1;
	nvic.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&nvic);
}

// ### DAC1 (DAC Channel 1) sur PA4
// Configuration
void DAC1_Config() {
	/*Activer GPIOA sur AHB */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
	/* Configurer PA4 en mode analogique*/
	GPIO_InitTypeDef gpio_a;
	GPIO_StructInit(&gpio_a);
	gpio_a.GPIO_Mode = GPIO_Mode_AN;
	gpio_a.GPIO_Pin = GPIO_Pin_4;
	GPIO_Init(GPIOA, &gpio_a);

	/*Activer DAC sur APB1 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
	/* Configurer DAC1 avec parametres par defaut */
	DAC_InitTypeDef dac_1;
	DAC_StructInit(&dac_1);
	DAC_Init(DAC_Channel_1, &dac_1);
	/* Activer DAC1 */
	DAC_Cmd(DAC_Channel_1, ENABLE);
}

void DAC1_Set(uint16_t value) {
	DAC_SetChannel1Data( DAC_Align_12b_R, value);
	DAC_SoftwareTriggerCmd( DAC_Channel_1, ENABLE);

}

void GPIOA_PA0_Config() {
	// switch PA0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
	GPIO_InitTypeDef switch_PA;
	GPIO_StructInit(&switch_PA);
	switch_PA.GPIO_Mode = GPIO_Mode_IN;
	switch_PA.GPIO_Pin = GPIO_Pin_0;
	GPIO_Init(GPIOB, &switch_PA);
}

------

=== Projet


<<<
=== Graphiques
[source,matlab]
------
clc
clear

% Compresseur Audio
m1 = 0.005
m2 = 0.0025
m3 = 0.0015
m4 = 0.001

E = linspace(0,3,1000);
Eb = 4096*E./3;
S1 = (4095)./(1+exp(-m1*(Eb-2047)));
S2 = (4095)./(1+exp(-m2*(Eb-2047)));
S3 = (4095)./(1+exp(-m3*(Eb-2047)));
S4 = (4095)./(1+exp(-m4*(Eb-2047)));
S1b = S1*3/4096;
S2b = S2*3/4096;
S3b = S3*3/4096;
S4b = S4*3/4096;

plot(E,S1b,'r',E,S2b,'g',E,S3b,'y',E,S4b,'b')
legend('m=0.005','m=0.0025','m=0.0015','m=0.001')
legend("Position",[0.15949,0.64679,0.22926,0.24161])
xlabel('Tension entrée')
ylabel('Tension sortie')
title('Compresseur dynamique audio')
axis([0 3 -0.1 3.1])

% Sinus
k = linspace(0,99,100000);
y = 0.374267578*sin(pi*k*2/100) + 1.5

min(y)
max(y)

plot(k,y)
xlabel('k')
ylabel('Tension')
title("Tension en sortie du convertisseur")
axis([0 99 0 3])
------

