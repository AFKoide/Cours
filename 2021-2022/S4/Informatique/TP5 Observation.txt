3.4)
On utilise un condensateur pour centrer le signal généré sur 0V.
Le casque a uen tension de repos à 0V, or, le micro-contrôleur ne peut pas générer des tensions négatives.
On fait donc travailler le micro-controleur sur une tension moyenne à 1.5V : on ajoute à la composante alternative une composante continue (le 2047). Ainsi, si on veut une tension à -1.5V, la carte génère 0V, et inversement, pour 1.5V, on mesure 3V.
Le role du condensateur est de supprimer cette composante continue.

Cependant, une fois que l'on branche un casque, le son n'est pas un DO, mais une note plus aigue. Cela s'explique par le casque qui a besoin d'une tension supérieure à celle en sortie du condensateur. 
Cette appel de tension provoque une perturbation du signal généré par la carte et qui crée des fréquences parasites.

3.5)
En mettant un suiveur entre le condensateur et le casque, l'AOP joue le role d'une alimentation qui va fournir un signal de meilleur qualité au casque, permettant d'entendre le DO.

4)
Les signaux en pente montante et descendante ont aucune différence audible. Cependant, ces signaux créent un son suffisament fort pour ne pas avoir à mettre le casque pour l'entendre.

Projet :
On utilise une capacité entre le micro contrôleur et la prise male pour ajouter une tension constante, et ainsi avoir une tension toujours positive (car le micro contrôleur ne fonctionne pas quand il s'agit des tensions négatives). 

Les fonctions DAC1_Set_Quickly et Get_Adc_Quickly doivent être très rapide pour pouvoir acquérir et traiter le signal en temps réel : utiliser des bibliothèques prendraient trop de temps (surtout par rapport à éclipse qui averti sur la taille de la bibliothèque).

stm32l1xx.h

stm32l1xx_adc.h
/** @defgroup ADC_flags_definition 
  * @{
  */ 

stm32l1xx_dac.h

core_cm3.h
/* IO definitions (access restrictions to peripheral registers) */
/**
    \defgroup CMSIS_glob_defs CMSIS Global Defines

    <strong>IO Type Qualifiers</strong> are used
    \li to specify the access to peripheral variables.
    \li for automatic generation of peripheral register debug information.
*/
